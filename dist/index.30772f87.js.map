{"mappings":"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","sources":["script.js"],"sourcesContent":["const btnCheck = document.querySelector('.check');\r\nconst btnAgain = document.querySelector('.again');\r\nconst btnSumbit = document.querySelector('.btn-submit');\r\nconst guess = document.querySelector('.guess');\r\nconst message = document.querySelector('.message');\r\nconst messageError = document.querySelector('.message-error');\r\nconst scoreLabel = document.querySelector('.score');\r\nconst highScoreLabel = document.querySelector('.highscore');\r\nconst minNum = document.querySelector('.min-num');\r\nconst maxNum = document.querySelector('.max-num');\r\nconst between = document.querySelector('.between');\r\n\r\nconst state = {\r\n  secretNum: 0,\r\n  highScore: 0,\r\n  score: 20,\r\n  maxNum: 20,\r\n  minNum: 1,\r\n  playing: true,\r\n};\r\n\r\n//------------------------------------------------------------------\r\n\r\nconst setValuesToNewGame = function () {\r\n  state.score = 20;\r\n  scoreLabel.textContent = '20';\r\n  message.textContent = 'Start guessing...';\r\n  between.textContent = `(Between ${state.minNum} and ${state.maxNum})`;\r\n};\r\n\r\nconst setValuesToDefault = function () {\r\n  state.maxNum = 20;\r\n  state.minNum = 1;\r\n  state.secretNum = 0;\r\n  state.score = 20;\r\n  state.playing = true;\r\n  scoreLabel.textContent = '20';\r\n  message.textContent = 'Start guessing...';\r\n  between.textContent = '(Between 1 and 20)';\r\n};\r\n\r\nconst createSetTimeout = function () {\r\n  setTimeout(() => {\r\n    messageError.textContent = '';\r\n  }, 3500);\r\n};\r\n\r\nconst clearInputFields = function () {\r\n  guess.value = '';\r\n  minNum.value = '';\r\n  maxNum.value = '';\r\n};\r\n\r\nconst createPositiveRandomNumber = function () {\r\n  return (\r\n    Math.trunc(Math.random() * (state.maxNum - state.minNum) + 1) + state.minNum\r\n  );\r\n};\r\n\r\nconst checkMaxGreater = function (negativeVal = false) {\r\n  // Check if min. number is greater than max. number.\r\n  // If this is the case, return. min. number should always be lower.\r\n\r\n  // With only negative values (negativeVal), things work different with comparing\r\n  const condition = negativeVal\r\n    ? state.minNum < state.maxNum\r\n    : state.minNum > state.maxNum;\r\n\r\n  if (condition) {\r\n    messageError.textContent =\r\n      \"Minimum number can't be higher than maximum number.\";\r\n\r\n    createSetTimeout();\r\n\r\n    return false;\r\n  }\r\n};\r\n\r\nconst compareGuessNumWithSecretNum = function (val) {\r\n  if (val > state.secretNum) {\r\n    state.score--;\r\n    message.textContent = 'Too high';\r\n    scoreLabel.textContent = state.score;\r\n  }\r\n\r\n  if (val < state.secretNum) {\r\n    state.score--;\r\n    message.textContent = 'Too low';\r\n    scoreLabel.textContent = state.score;\r\n  }\r\n\r\n  if (val === state.secretNum) {\r\n    if (!state.playing) return;\r\n    state.score--;\r\n    message.textContent = 'Correct!';\r\n    if (state.score > state.highScore) state.highScore = state.score;\r\n    scoreLabel.textContent = state.score;\r\n    highScoreLabel.textContent = state.highScore;\r\n    state.playing = false;\r\n  }\r\n};\r\n\r\nconst checkGuessNumber = function () {\r\n  const val = +guess.value;\r\n  // With only negative values, things work different with comparing (other way around)\r\n  if (state.maxNum < 0 && state.minNum < 0) {\r\n    if (val < state.maxNum || val > state.minNum) {\r\n      message.textContent = `Number range is ${state.minNum}-${state.maxNum}.`;\r\n      return;\r\n    }\r\n    compareGuessNumWithSecretNum(val);\r\n  }\r\n\r\n  // Below is for positive values\r\n  if (\r\n    (state.maxNum > 0 && state.minNum > 0) ||\r\n    (state.maxNum > 0 && state.minNum < 0)\r\n  ) {\r\n    if (val > state.maxNum || val < state.minNum) {\r\n      message.textContent = `Number range is ${state.minNum}-${state.maxNum}.`;\r\n      return;\r\n    }\r\n    compareGuessNumWithSecretNum(val);\r\n  }\r\n};\r\n\r\nconst checkMinandMaxFields = function () {\r\n  // Set borders back to default - when user filled in one field before instead of two the border was red\r\n  minNum.style.border = '2px solid #eee';\r\n  maxNum.style.border = '2px solid #eee';\r\n\r\n  // Get values out of fields\r\n  const maxNumVal = maxNum.value;\r\n  const minNumVal = minNum.value;\r\n\r\n  // If not a number, return immediately\r\n  if (!isFinite(minNumVal) || !isFinite(maxNumVal)) {\r\n    messageError.textContent = 'Only numbers as input are valid.';\r\n    clearInputFields();\r\n    createSetTimeout();\r\n    return;\r\n  }\r\n\r\n  // When both fields are filled in, move on to init() function\r\n  if (maxNumVal !== '' && minNumVal !== '') {\r\n    state.maxNum = +maxNumVal;\r\n    state.minNum = +minNumVal;\r\n  }\r\n\r\n  // When one of the fields is empty, apply red border to that field\r\n  if (maxNumVal === '' || minNumVal === '') {\r\n    minNum.value === ''\r\n      ? (minNum.style.border = '2px solid #C02B0B')\r\n      : (maxNum.style.border = '2px solid #C02B0B');\r\n\r\n    // Set back to 20 and 1 (in this case either one of them is set to 0 because of line 51 and 52)\r\n    setValuesToDefault();\r\n\r\n    return;\r\n  }\r\n\r\n  init();\r\n};\r\n\r\n//------------------------------------------------------------------\r\n\r\nconst init = function () {\r\n  // Return when both values are the same\r\n  if (state.maxNum === state.minNum) {\r\n    messageError.textContent = \"Numbers can't be the same.\";\r\n    createSetTimeout();\r\n    clearInputFields();\r\n    setValuesToDefault();\r\n    return;\r\n  }\r\n\r\n  // When both min. and max. values are positive (default)\r\n  if (state.maxNum > 0 && state.minNum > 0) {\r\n    const check = checkMaxGreater();\r\n\r\n    if (check === false) {\r\n      setValuesToDefault();\r\n      clearInputFields();\r\n      return;\r\n    }\r\n\r\n    state.secretNum = createPositiveRandomNumber();\r\n    setValuesToNewGame();\r\n    clearInputFields();\r\n  }\r\n\r\n  // When both min. and max. numbers are negative\r\n  // With only negative values (negativeVal), things work the other way around with comparing\r\n  if (state.maxNum < 0 && state.minNum < 0) {\r\n    const check = checkMaxGreater(true);\r\n\r\n    if (check === false) {\r\n      setValuesToDefault();\r\n      clearInputFields();\r\n      return;\r\n    }\r\n\r\n    state.secretNum =\r\n      Math.trunc(Math.random() * (state.maxNum - state.minNum) - 1) +\r\n      state.minNum;\r\n\r\n    setValuesToNewGame();\r\n    clearInputFields();\r\n    return;\r\n  }\r\n\r\n  // When one of the numbers is positive and one negative\r\n  if (state.maxNum < 0 || state.minNum < 0) {\r\n    const check = checkMaxGreater();\r\n\r\n    if (check === false) {\r\n      setValuesToDefault();\r\n      clearInputFields();\r\n      return;\r\n    }\r\n\r\n    // e.g. max = 30, min = -20. Player basically wants a number between 1 to 30 and -1 to -20.\r\n    // We create a random number. When it is <= the minimum number (in this case 20 (we cut of the '-')), we create a random number again\r\n    // When this random number is > 0.5 we multiply the first created random number 1, when it is < 0.5 we multiple it by -1\r\n    // With this we can create a number that is either negative or positive when the number is <= 20 (and in this example this is what the user wants (number between -1 to -20))\r\n    // In this case -20 is excluded and -1 is included\r\n    let num = Math.trunc(Math.random() * state.maxNum) + 1;\r\n    if (num <= Math.abs(state.minNum)) {\r\n      num *= Math.random() > 0.5 ? 1 : -1;\r\n    }\r\n    state.secretNum = num;\r\n\r\n    setValuesToNewGame();\r\n    clearInputFields();\r\n  }\r\n};\r\n\r\n//------------------------------------------------------------------\r\n\r\n// Event listeners\r\nbtnCheck.addEventListener('click', checkGuessNumber);\r\nguess.addEventListener('keypress', function (e) {\r\n  if (e.key === 'Enter') checkGuessNumber();\r\n});\r\n\r\nconst elements = [minNum, maxNum];\r\nelements.forEach(element =>\r\n  element.addEventListener('keypress', function (e) {\r\n    state.playing = true;\r\n    if (e.key === 'Enter') checkMinandMaxFields();\r\n  })\r\n);\r\n\r\nbtnSumbit.addEventListener('click', function () {\r\n  state.playing = true;\r\n  checkMinandMaxFields();\r\n});\r\nbtnAgain.addEventListener('click', function () {\r\n  setValuesToDefault();\r\n  clearInputFields();\r\n  state.secretNum = createPositiveRandomNumber();\r\n});\r\n\r\ninit();\r\n"],"names":["btnCheck","document","querySelector","btnAgain","btnSumbit","guess","message","messageError","scoreLabel","highScoreLabel","minNum","maxNum","between","state","secretNum","highScore","score","playing","setValuesToNewGame","textContent","setValuesToDefault","createSetTimeout","setTimeout","clearInputFields","value","createPositiveRandomNumber","Math","trunc","random","checkMaxGreater","negativeVal","compareGuessNumWithSecretNum","val","checkGuessNumber","checkMinandMaxFields","style","border","maxNumVal","minNumVal","isFinite","init","num","abs","addEventListener","e","key","elements","forEach","element"],"version":3,"file":"index.30772f87.js.map"}